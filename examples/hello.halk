` comments in backticks `

` preprocessor directives `
#INCLUDE##math#
#INCLUDE##io#
` source code begins here `

str:hello = 'hello, ';                                   ` variables must be given a value at declaration `

int:PI = math/PI;                                        ` namespaces are accessed with a '/'' `

void:greeting. str:to = {                                ` functions declared the same way as variables, but with a . after 
                                                         the name, followed by arguments `

   str:message = strcat.hello, to;                       ` function application is right-associative `

   stdo.message;                                         ` since 'io' was brought into global scope, we
                                                         do not prefix it with a namespace/ `
}

int:sum_all. any[]:_  = {                                ` variadic functions are possible with the reserved '_' argument,
                                                         which is treated as an array `
   return.foldl.sum, 0, _;  
}

int:fibonacci. int:n = {
   if.(eq.n, 0), {
      return.1;
   }, {
      return.sum.
         (fibonacci.(sub.n, 1)),
         (fibonacci.(sub.n, 2));
   }
}

int:main. str[]:args = {                                 ` where code will begin executing `
   greeting.` comments can be placed *anywhere* `'world.';

   return.0;
}
